{"title":"Castor workflow with `setupProject`","markdown":{"headingText":"Castor workflow with `setupProject`","containsRefs":false,"markdown":"\n```{r setup}\n#| include: false\nknitr::opts_chunk$set(tidy = FALSE, \n                      warning = FALSE, \n                      message = FALSE, \n                      error = FALSE)\n\n## truncate text output\nhook_output <- knitr::knit_hooks$get(\"output\")\n\nknitr::knit_hooks$set(output = function(x, options) {\n  if (!is.null(n <- options$outlines)) {\n    x <- xfun::split_lines(x)\n    if (length(x) > n) {\n      # truncate the output\n      x <- c(head(x, n), \"....\\n\")\n    }\n    x <- paste(x, collapse = \"\\n\")\n  }\n  hook_output(x, options)\n})\n\noptions(repos = \"http://cran.us.r-project.org\")\n```\n\n[Castor](https://github.com/bcgov/castor) is a forest and land-use model\nused to simulate forest harvest and its effects on multiple forest\nvalues, which include not only timber, but also habitat for several\nwildlife (e.g. caribou, fisher). It is a fully open-source model,\nimplemented in `SpaDES`, developed and maintained by researchers at the\nForest Analysis and Inventory Branch, BC Ministry of Forests.\n\nIn this chapter, we demonstrate how to set up a Castor workflow using\n`setupProject` from the\n[`SpaDES.project`](https://spades-project.predictiveecology.org/)\npackage. The code was adapted from [this Castor\nscenario](https://github.com/bcgov/castor/blob/main/R/scenarios/comparison_stsm/base_case_harvest_flow_20230628.Rmd),\nwith some modifications to streamline the code and accommodate the use of\n`SpaDES.project` functions[^castorexample-1].\n\nA bare-bones version of this example is also available in this [.R script ](https://github.com/PredictiveEcology/PredictiveEcology.org/blob/training-book/tutos/castorExample/castorExample.R)\n\n## Workflow setup\n\n```{r wfsetup}\n#| message: false\n#| warning: false\n#| results: hide\n## install/load necessary packages\nrepos <- c(\"predictiveecology.r-universe.dev\", getOption(\"repos\"))\ninstall.packages(c(\"remotes\", \"DiagrammeR\"), repos = repos)\nremotes::install_github(\"PredictiveEcology/SpaDES.project@transition\")   ## to deal with modules in nested GH folders.\nlibrary(SpaDES.project)\n\n## get Castor modules\nsetupFunctions(paths = list(\"projectPath\" = \"~/\"),\n               functions = c(\"PredictiveEcology/PredictiveEcology.org@training-book/tutos/castorExample/getCastorModulesAndDB.R\",\n                             \"PredictiveEcology/PredictiveEcology.org@training-book/tutos/castorExample/params.R\"),\n               overwrite = TRUE)\noutMod <- getCastorModulesAndDB(paths = list(\"modulePath\" = \"~/tutos/castorExample/modules/\",\n                                             \"projectPath\" = \"~/tutos/castorExample\"),\n                                modules = c(\"dataCastor\", \n                                            \"growingStockCastor\", \n                                            \"forestryCastor\", \n                                            \"blockingCastor\"),\n                                dbURL = \"https://drive.google.com/file/d/1-2POunzC7aFbkKK5LeBJNsFYMBBY8dNx/view?usp=sharing\",\n                                dbPath = \"R/scenarios/comparison_stsm\")\n\n## set up the workflow paths, dependencies and modules\n## as well as simulation parameters, (some) inputs and outputs\nout <- setupProject(\n  paths = list(\"inputPath\" = \"modules/forestryCastor/inputs\",\n               \"outputPath\" = \"/R/scenarios/comparison_stsm/outputs\",\n               \"modulePath\" = \"modules/\",\n               \"cachePath\" = \"modules/forestryCastor\",\n               \"projectPath\" = \"~/tutos/castorExample\"),\n  modules = names(outMod$modules),\n  functions = \"bcgov/castor@main/R/functions/R_Postgres.R\",\n  ## install and load\n  require = \"dplyr\",\n  ## install but don't load these:\n  packages = c(\n    \"DBI\", \n    \"keyring\",\n    \"rgdal\", \n    \"RPostgreSQL\", \n    \"sp\",\n    \"terra\"\n  ),\n  params = \"params.R\",\n  times = list(start = 0, end = 20),\n  outputs = {\n    data.frame(objectName = c(\"harvestReport\",\n                              \"growingStockReport\"))\n  },\n  scenario = {\n    data.table(name = \"stsm_base_case\",\n               description = paste(\"Priority queue = oldest first. Adjacency constraint\",\n                                   \"= None. Includes roads (mst) and blocks (pre).\",\n                                   \"Harvest flow = 147,300 m3/year in decade 1, 133,500\",\n                                   \"m3/year in decade 2, 132,300 m3/year in decades 3 to\",\n                                   \"14 and 135,400 m3/year in decades 15 to 25.\",\n                                   \"Minimum harvest age = 80 and minimum harvest volume = 150\"))\n  },\n  harvestFlow = {\n    rbindlist(list(data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 1,\n                                                 to = 1, \n                                                 by = 1),\n                                            1), \n                              flow = 1473000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 2,\n                                                 to = 2, \n                                                 by = 1),\n                                            1), \n                              flow = 1335000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 3,\n                                                 to = 14, \n                                                 by = 1),\n                                            1), \n                              flow = 1323000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 15,\n                                                 to = 25, \n                                                 by = 1),\n                                            1), \n                              flow = 1354000, \n                              partition_type = 'live')  \n    ))\n  },\n  Restart = TRUE\n)\n```\n\n\n## Initialise the model and inspect `simList`\n\n`setupProject()` returns a names list containing values that can be passed to\n`simInit()` arguments. \n\nWe use `do.call()` to pass the whole list of arguments to `simInit`.\n\n```{r simInit}\n#| results: hide\n\n## initialize simulation\ncastorInit <- do.call(SpaDES.core::simInit, out)\n```\n\nAnother (more verbose) option would to call `simInit` directly:\n\n```{r simInit2}\n#| eval: false\n\n## initialize simulation\ncastorInit <- SpaDES.core::simInit(\n  times = out$times,\n  params = out$params, \n  modules = out$modules, \n  objects = list(scenario = out$scenario, \n                 harvestFlow = out$harvestFlow)\n)\n```\n\n\nUse the following functions to access workflow/model properties. `events()`, for\ninstance will output the scheduled events, which at this point are only the `init`\nevents of each module as you can see in the output below.\n\n``` {r}\n#| eval: false\n\n## inspect the `simList`\nSpaDES.core::params(castorInit) \nSpaDES.core::inputs(castorInit)\nSpaDES.core::outputs(castorInit)\nSpaDES.core::times(castorInit) \n\n## scheduled events\nSpaDES.core::events(castorInit) \n```\n\n```{r}\n#| echo: false\n\nSpaDES.core::events(castorInit) \n```\n\n## Visualize the workflow\n\n`moduleDiagram()` and `objectDiagram()` are great to visualise how each module\ninteracts with the other. Recall that these interactions arise from object \"exchanges\"\nbetween modules, which are deduced by `simInit()` from module metadata (@fig-objectDiagram)\n-- i.e., if a module's inputs are another's outputs, then the first module will follow the second.\n\n```{r}\n#| eval: false\n\nSpaDES.core::moduleDiagram(castorInit)\nSpaDES.core::objectDiagram(castorInit)\n```\n\n```{r fig-moduleDiagram}\n#| echo: false\n#| fig-height: 6\n#| fig-width: 6\n#| message: false\n#| warning: false\n#| fig-cap: \"Diagram of module connections.\"\n\nSpaDES.core::moduleDiagram(castorInit)\n```\n\n```{r fig-objectDiagram}\n#| echo: false\n#| fig-align: center\n#| fig-cap: \"Diagram of module inter-dependencies with object names.\"\n#| fig-width: 10\n\nknitr::include_graphics(normalizePath(\"assets/img/castorExample_objDiagram.png\", winslash = \"/\"),\n                        dpi = NA)\n```\n\n## Run simulation\n\n`spades()` runs the simulation, beginning with the execution of the `init` events.\nNotice how the result of `outputs()` differs from previously.\n\n```{r}\n#| eval: false\n\ncastorSim <- SpaDES.core::spades(castorInit)\n\n## we now have outputs\nSpaDES.core::outputs(castorSim)\n```\n\n```{r}\n#| include: false\n\ncastorSim <- SpaDES.core::spades(castorInit)\n```\n\n```{r}\n#| echo: false\n\nSpaDES.core::outputs(castorSim)\n```\n\n`completed(castorSim)` shows the chaining of events that was produced and run by `spades()`.\nThe sequence of steps in the workflow therefore arises from each module's events \nand their scheduling, rather than being explicitly imposed by the user.\n\n```{r}\n#| outlines: 10\nSpaDES.core::completed(castorSim)\n```\n\nWe suggest omitting the  `blockingCastor` module in `setupProject()` and rerunning\nthe workflow again to see how `spades` is capable of re-generating a new workflow with \nlittle effort from the user. \n\n```{r}\n#| eval: false\n\nmodules <- c(\"dataCastor\", \n             \"growingStockCastor\", \n             \"forestryCastor\")\n\nout <- setupProject(\n  paths = list(\"inputPath\" = \"modules/forestryCastor/inputs\",\n               \"outputPath\" = \"/R/scenarios/comparison_stsm/outputs\",\n               \"modulePath\" = \"modules/\",\n               \"cachePath\" = \"modules/forestryCastor\",\n               \"projectPath\" = \"~/tutos/castorExample/\"),\n  modules = modules,\n  functions = \"bcgov/castor@main/R/functions/R_Postgres.R\",\n  ## install and load\n  require = \"dplyr\",\n  ## install but don't load these:\n  packages = c(\n    \"DBI\", \n    \"keyring\",\n    \"rgdal\", \n    \"RPostgreSQL\", \n    \"sp\",\n    \"terra\"\n  ),\n  params = \"params.R\",\n  times = list(start = 0, end = 20),\n  outputs = {\n    data.frame(objectName = c(\"harvestReport\",\n                              \"growingStockReport\"))\n  },\n  scenario = {\n    data.table(name = \"stsm_base_case\",\n               description = paste(\"Priority queue = oldest first. Adjacency constraint\",\n                                   \"= None. Includes roads (mst) and blocks (pre).\",\n                                   \"Harvest flow = 147,300 m3/year in decade 1, 133,500\",\n                                   \"m3/year in decade 2, 132,300 m3/year in decades 3 to\",\n                                   \"14 and 135,400 m3/year in decades 15 to 25.\",\n                                   \"Minimum harvest age = 80 and minimum harvest volume = 150\"))\n  },\n  harvestFlow = {\n    rbindlist(list(data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 1,\n                                                 to = 1, \n                                                 by = 1),\n                                            1), \n                              flow = 1473000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 2,\n                                                 to = 2, \n                                                 by = 1),\n                                            1), \n                              flow = 1335000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 3,\n                                                 to = 14, \n                                                 by = 1),\n                                            1), \n                              flow = 1323000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age > 79 AND vol > 149 ', \n                              period = rep( seq (from = 15,\n                                                 to = 25, \n                                                 by = 1),\n                                            1), \n                              flow = 1354000, \n                              partition_type = 'live')  \n    ))\n  },\n  Restart = TRUE\n)\n\n## initialize and run simulation in one go\ncastorSim2 <- do.call(SpaDES.core::simInitAndSpades, out)\n```\n\n[^castorexample-1]: `SpaDES.project` is currently being adapted to deal\nwith modules nested in folders of GitHub repositories (instead of\nliving in their own GitHub repositories), as is the case of Castor\nmodules. Hence, the code in this example is subject to changes in\nthe near future.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"css":["assets/css/main.scss"],"output-file":"castorExample.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","bibliography":["references/references.bib"],"theme":{"light":"flatly","dark":"darkly"},"grid":{"sidebar-width":"350px"},"fig-cap-location":"bottom","tbl-cap-location":"top","title-block-banner":true,"title-block-categories":false,"code-copy":true,"smooth-scroll":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}