---
title       : "New module -- Introduction"
author      : "Eliot McIntire"
date        : "May 2024"
editor_options:
  chunk_output_type: console
---

## Creating a new module

```{r setup}
#| include: false
knitr::opts_chunk$set(tidy = FALSE, 
                      eval = FALSE,
                      warning = FALSE, 
                      message = FALSE, 
                      error = FALSE)

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$outlines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "....\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})

options(repos = "http://cran.us.r-project.org")
if (!require("Require")) {
  install.packages("Require", repos = c("https://predictiveecology.r-universe.dev", getOption("repos")))
}

```

## New Module Introduction

SpaDES modules are comprised of R code that has metadata and the gets
put into functions. With this in mind, we can start with some simple R
code.

We will start by thinking about metadata: *What is metadata?*

We can examine the following code chunk. First, we ask: what are the
**inputs** and the **outputs**?

```{r,eval=FALSE}
# create some data
x <- y + rnorm(10)
# fit a linear model
out <- lm(x ~ y)

# plot the fit
plot(out)
```

The **inputs** to this chunk are just one: the object `y`. This code
will not work (i.e., it will cause an error) if `y` is not defined. The
**outputs** are `x` and `out`. Both of these are created within this
chunk.

Next, *what are the package dependencies?*. We see that there are two
functions: `rnorm` and `lm`. We don't know what packages they are in, so
we can find out by typing them at the R prompt. At the bottom, it says
that the function `rnorm` is in the `stats` package. Fortunately for us,
this is a default ("base") package in R and it is always pre-loaded. So,
nothing to do here.

```{r,eval=FALSE}
> rnorm
function (n, mean = 0, sd = 1) 
...
<environment: namespace:stats>
```

So, our metadata are:

-   Inputs: `y`
-   Outputs: `x`, `out`
-   Package dependencies: Base packages only

We will next put them into the correct places in the new SpaDES module.

## Make the module

Now we use the `SpaDES` function `newModule` to make a new module. (see
)

```{r,eval=FALSE}
SpaDES.core::newModule(name = "My_linear_model", path = ".")
```

This will create a new folder with several files in it. See [`?newModule`](https://rdrr.io/cran/SpaDES.core/man/newModule.html)
for details. For now, run the above and open the `.R` that is created.

## Edit metadata

Scroll down to where it says `inputObjects` and `expectsInputs`. We will
put `y` there.

```{r,eval=FALSE}
inputObjects = bindrows(
    expectsInput(objectName = "y", objectClass = "numeric", desc = "The inputs for the linear model", sourceURL = NA)
  )
```

Next, scroll down to where it says `outputObjects` and `createsOutput`.
We will put `x` and `out` there. Don't forget a comma at the end of each
`createsOutput` as these are arguments to `bindrows`

```{r,eval=FALSE}
outputObjects = bindrows(
    createsOutput(objectName = "x", objectClass = "numeric", desc = "The randomly created varible that is used as a response variable"),
    createsOutput(objectName = "out", objectClass = "lm", desc = "A linear model object from the equation (x ~ y)")
  )
```

## Put code in `Init` function

First, we move the first two lines of code into a function. We will
choose the `Init` function. We will discuss why in a bit.

```{r,eval=FALSE}
Init <- function(sim) {
  x <- y + rnorm(10)
  out <- lm(x ~ y)
  return(invisible(sim))
}
```

## Sharing inputs and outputs

You may have noticed that the `Init` function template defines a
function with a `sim` argument. This is an object we haven't learned
about yet; we will just think of it as a list where we can put objects
we want to share with other modules or "just keep them for later", such
as our **inputs** and **outputs**.

To share these objects, we assign them to the `sim` list using the
normal R notations. We have to make this modification 5 times for every
instance of our **inputs** and **outputs**

```{r,eval=FALSE}
Init <- function(sim) {
  sim$x <- sim$y + rnorm(10)
  sim$out <- lm(sim$x ~ sim$y)
  return(invisible(sim))
}
```

Now we have a module that creates two objects, `x` and `out` and puts
them in the `sim` objects. This all happens in a function called `Init`.
Next: the `plot(out)`

## Events

We can look at our 3 lines of example and think, "this is 2 steps: a
first that does the model and a second that plots it" (of course, you
can divide this up in several ways; we will go with this for now.).

We can call the 2 steps, **events** and imagine we could run them in
sequence... first, lets put the `plot` in a function. We will choose the
`plotFun` function. We will also add the `sim$` because the `out` will
be shared because it is in the `sim` "list".

```{r,eval=FALSE}
plotFun <- function(sim) {
  plot(sim$out)
  return(invisible(sim))
}
```

The template already has some default code that actually puts the events
in an order without us needing to do anything. It also has a parameter
that determines whether the plot will happen or not. We will just accept
the defaults for now.

## Default Values

Recall, we don't have a value for `y`. This means that if you run the
following, you will get an error:

```{r,eval=FALSE}
SpaDES.core::simInitAndSpades(modules = "My_linear_model", paths = list(modulePath = "tutos/NewModuleIntro"))
```

Just like functions in R, we can supply default values for our
**inputs**. We put these in a function at the bottom called
`.inputObjects`.

Copy this to the module, replacing the `.inputObjects` function.

```{r,eval=FALSE}
.inputObjects <- function(sim) {
  if (!suppliedElsewhere("y", sim))
    sim$y <- rnorm(10, mean = 20, sd = 2)
  return(invisible(sim))
}
```

## Run the new module

Now, we have **inputs** and **outputs** defined, our code has been place
in 2 spots, and we have default value for `y`.

```{r,eval=FALSE}
SpaDES.core::simInitAndSpades(modules = "My_linear_model", paths = list(modulePath = "tutos/NewModuleIntro"))
```

We now have a SpaDES module that has metadata, generates random starting
data (if the user doesn't supply an alternative), fits a linear model,
outputs that model, and plots the fit.

## Questions

1.  What are some things we "gained" from putting our simple 3 lines of
    code into a module?
    -   We can turn off plotting easily. Set `.plotInitialTime = NA` in
        the `simInitAndSpades` call.
2.  What are some things we "lost"?
    -   More complicated. (overkill for these 3 lines?)
3.  What if we used an R package that wasn't in the base packages list?
    -   See [`?defineModule`](https://rdrr.io/cran/SpaDES.core/man/defineModule.html) for all the metadata items. Specifically,
        see `reqdPkgs`.
4.  What is the `sim`? See [`?'.simList-class'`](https://rdrr.io/cran/SpaDES.core/man/simList-class.html)

## See also

See also: [`?expectsInput`](https://rdrr.io/cran/SpaDES.core/man/expectsInput.html), [`?createsOutput`](https://rdrr.io/cran/SpaDES.core/man/createsOutput.html), [`?simInitAndSpades`](https://rdrr.io/cran/SpaDES.core/man/simInitAndSpades.html),
[`?newModule`](https://rdrr.io/cran/SpaDES.core/man/newModule.html)
